{"version":3,"sources":["Components/Setter/Setter.module.css","Components/Counter/Counter.module.css","Components/UI/Button/Button.module.css","Components/UI/Button/Button.tsx","Components/Setter/Setter.tsx","Components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","classes","button","type","disabled","isDisabled","onClick","title","Setter","useState","minValue","setMinValue","maxValue","setMaxValue","maxInputError","setMaxInputError","minInputError","setMinInputError","setter","onSubmit","e","preventDefault","newStartData","onSetStartData","onChangeMessage","setterBody","setterActions","htmlFor","error","id","value","onChange","currentTarget","setterControls","Counter","counter","counterOutput","max","warningMessage","counterWarning","counterControls","onIncreaseValue","onResetValue","App","setValue","outputMode","setOutputMode","useEffect","currentValue","localStorage","getItem","newValue","JSON","parse","startData","setItem","stringify","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82ef43b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"setter\":\"Setter_setter__2mt7M\",\"setterBody\":\"Setter_setterBody__22By4\",\"setterActions\":\"Setter_setterActions__1Aj11\",\"error\":\"Setter_error__Y7HHZ\",\"setterControls\":\"Setter_setterControls__2csyL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__29siA\",\"counterOutput\":\"Counter_counterOutput__1I8hQ\",\"max\":\"Counter_max__32UwU\",\"counterControls\":\"Counter_counterControls__3zft0\",\"counterWarning\":\"Counter_counterWarning__2wx9-\",\"error\":\"Counter_error__24ZpG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ygIhZ\"};","import React from \"react\";\nimport classes from \"./Button.module.css\";\n\nexport type buttonPropsType = {\n  type: \"button\" | \"submit\" | \"reset\" | undefined\n  title: string\n  onClick?: () => void\n  isDisabled: boolean\n}\n\nexport function Button(props: buttonPropsType) {\n  return (\n    <button\n      className={classes.button}\n      type={props.type}\n      disabled={props.isDisabled}\n      onClick={props.onClick}>{props.title}</button>\n  )\n}","import React, {ChangeEvent, FormEvent, useState} from 'react';\nimport classes from \"./Setter.module.css\";\nimport {Button} from \"../UI/Button/Button\";\nimport {outputModeType, startDataType} from \"../../App\";\n\nexport type setterPropsType = {\n  onSetStartData: (startData: startDataType) => void\n  onChangeMessage: (message: outputModeType) => void\n}\n\nexport function Setter(props: setterPropsType) {\n  const [minValue, setMinValue] = useState<string>(\"\");\n  const [maxValue, setMaxValue] = useState<string>(\"\");\n  const [maxInputError, setMaxInputError] = useState<boolean>(false);\n  const [minInputError, setMinInputError] = useState<boolean>(false);\n\n  const changeMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (+e.currentTarget.value <= 0 || +maxValue !== 0 && +e.currentTarget.value >= +maxValue) {\n      setMinInputError(true);\n      props.onChangeMessage(\"ERROR\");\n    } else {\n      setMinInputError(false);\n      if (!maxInputError) {\n        props.onChangeMessage(\"SET\");\n      }\n    }\n    setMinValue(e.currentTarget.value);\n  }\n  const changeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (+e.currentTarget.value <= 0 || +minValue !== 0 && +e.currentTarget.value <= +minValue) {\n      setMaxInputError(true);\n      props.onChangeMessage(\"ERROR\");\n    } else {\n      setMaxInputError(false);\n      if (!minInputError) {\n        props.onChangeMessage(\"SET\");\n      }\n    }\n    setMaxValue(e.currentTarget.value);\n  }\n\n  const addNewStartDataHandler = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    let newStartData = {\n      minValue: +minValue,\n      maxValue: +maxValue\n    }\n    props.onSetStartData(newStartData);\n    props.onChangeMessage(\"DEFAULT\");\n  }\n\n  return (\n    <div className={classes.setter}>\n      <form onSubmit={addNewStartDataHandler}>\n        <div className={classes.setterBody}>\n          <div className={classes.setterActions}>\n            <label htmlFor=\"startVal\">start value:</label>\n            <input className={minInputError ? classes.error : \"\"} id={\"startVal\"} type=\"number\" value={minValue}\n                   onChange={changeMinValueHandler}/>\n            <label htmlFor=\"maxVal\">max value:</label>\n            <input className={maxInputError ? classes.error : \"\"} id={\"maxVal\"} type=\"number\" value={maxValue}\n                   onChange={changeMaxValueHandler}/>\n          </div>\n          <div className={classes.setterControls}>\n            <Button type={\"submit\"} title={\"Set\"} isDisabled={maxInputError || minInputError || false}/>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}","import React from 'react';\nimport classes from \"./Counter.module.css\";\nimport {Button} from \"../UI/Button/Button\";\n\nexport type counterPropsType = {\n  value: number\n  minValue: number\n  maxValue: number\n  warningMessage: string\n  onIncreaseValue: () => void\n  onResetValue: () => void\n}\n\nexport function Counter(props: counterPropsType) {\n\n  return (\n    <div className={classes.counter}>\n      <div className={`${classes.counterOutput} ${props.value === props.maxValue && classes.max}`}>\n        {props.warningMessage\n          ? <div\n            className={`${classes.counterWarning} ${props.warningMessage === \"Invalid input!!!\" ? classes.error : \"\"}`}>\n            {props.warningMessage}\n          </div>\n          : <div>{props.value}</div>\n        }\n      </div>\n      <div className={classes.counterControls}>\n        <Button\n          type={\"button\"}\n          title={\"Increase\"}\n          isDisabled={props.value === props.maxValue}\n          onClick={props.onIncreaseValue}\n        />\n        <Button\n          type={\"button\"}\n          title={\"Reset\"}\n          isDisabled={props.value === props.minValue}\n          onClick={props.onResetValue}/>\n      </div>\n    </div>\n  )\n}","import React, {useEffect, useState} from 'react';\nimport {Setter} from \"./Components/Setter/Setter\";\nimport {Counter} from \"./Components/Counter/Counter\";\nimport \"./App.css\";\n\nexport type startDataType = {\n  minValue: number\n  maxValue: number\n}\nexport type outputModeType = \"DEFAULT\" | \"SET\" | \"ERROR\";\n\nexport function App() {\n  const [maxValue, setMaxValue] = useState(7);\n  const [minValue, setMinValue] = useState(0);\n  const [value, setValue] = useState<number>(minValue);\n  const [outputMode, setOutputMode] = useState<outputModeType>(\"DEFAULT\");\n\n\n  useEffect(()=>{\n    let currentValue = localStorage.getItem('startData');\n    if (currentValue) {\n      let newValue = JSON.parse(currentValue);\n      setValue(newValue.value);\n      setMinValue(newValue.minValue);\n      setMaxValue(newValue.maxValue);\n    }\n  }, []);\n  useEffect(()=>{\n    let startData = {\n      minValue,\n      maxValue,\n      value\n    }\n    localStorage.setItem('startData', JSON.stringify(startData));\n  }, [value]);\n\n  let warningMessage = \"\";\n  if (outputMode === \"ERROR\") {\n    warningMessage = \"Invalid input!!!\"\n  }\n  if (outputMode === \"SET\") {\n    warningMessage = \"Enter values and press SET\";\n  }\n\n  const increaseValueHandler = () => {\n    setValue(value + 1);\n  }\n  const resetValueHandler = () => {\n    setValue(minValue);\n  }\n  const setStartValuesHandler = (startData: startDataType) => {\n    setMaxValue(startData.maxValue);\n    setMinValue(startData.minValue);\n    setValue(startData.minValue);\n  }\n\n  const changeOutputModeHandler = (message: outputModeType) => {\n    setOutputMode(message);\n  }\n  return (\n    <div className={'App'}>\n      <Setter onSetStartData={setStartValuesHandler} onChangeMessage={changeOutputModeHandler}/>\n      <Counter\n        value={value}\n        maxValue={maxValue}\n        minValue={minValue}\n        warningMessage={warningMessage}\n        onIncreaseValue={increaseValueHandler}\n        onResetValue={resetValueHandler}/>\n    </div>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}